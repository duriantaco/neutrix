import{_ as e,c as s,a0 as n,o as t}from"./chunks/framework.CB8VgNwK.js";const u=JSON.parse('{"title":"API Reference","description":"","frontmatter":{},"headers":[],"relativePath":"api/index.md","filePath":"api/index.md"}'),o={name:"api/index.md"};function p(i,a,l,r,c,d){return t(),s("div",null,a[0]||(a[0]=[n(`<h1 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h1><h2 id="store-creation" tabindex="-1">Store Creation <a class="header-anchor" href="#store-creation" aria-label="Permalink to &quot;Store Creation&quot;">​</a></h2><p>The <code>createStore</code> function is the entry point for creating a new neutrix store. It sets up the state container with all the necessary features like state tracking, computed values, and persistence.</p><h2 id="createstore" tabindex="-1">createStore <a class="header-anchor" href="#createstore" aria-label="Permalink to &quot;createStore&quot;">​</a></h2><p>Creates a new store instance.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function createStore&lt;T extends State&gt;(</span></span>
<span class="line"><span>  initialState?: T,</span></span>
<span class="line"><span>  options?: StoreOptions</span></span>
<span class="line"><span>): Store&lt;T&gt;</span></span></code></pre></div><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><h4 id="initialstate" tabindex="-1">initialState <a class="header-anchor" href="#initialstate" aria-label="Permalink to &quot;initialState&quot;">​</a></h4><p>Type: <code>T</code> (optional) The initial state of the store. If not provided, will default to an empty object.</p><h4 id="options" tabindex="-1">options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;options&quot;">​</a></h4><p>Type: <code>StoreOptions</code> (optional)</p><ul><li><code>devTools?: boolean</code> - Enable Redux DevTools integration for debugging</li><li><code>persist?: boolean | ((state: any) =&gt; any)</code> - Enable state persistence to localStorage. Can be a boolean or a function to customize what gets persisted</li><li><code>name?: string</code> - Store name for DevTools/persistence identification</li><li><code>validate?: (state: State) =&gt; boolean | string</code> - Validation function for state updates</li><li><code>migration?: { version: number; migrate: (oldState: any) =&gt; any }</code> - State migration configuration</li><li><code>concurrent?: boolean</code> - Enable concurrent mode support</li></ul><h2 id="store-interface" tabindex="-1">Store Interface <a class="header-anchor" href="#store-interface" aria-label="Permalink to &quot;Store Interface&quot;">​</a></h2><h3 id="get" tabindex="-1">get <a class="header-anchor" href="#get" aria-label="Permalink to &quot;get&quot;">​</a></h3><p><code>get&lt;K extends keyof T&gt;(path: K | string): T[K]</code></p><p>Gets a value from the store using a path string.</p><p>Example:</p><p><code>const userName = store.get(&#39;user.profile.name&#39;)</code></p><h3 id="set" tabindex="-1">set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set&quot;">​</a></h3><p><code>set&lt;K extends keyof T&gt;(path: K | string, value: any): void</code></p><p>Sets a value in the store at the given path.</p><p>Example:</p><p><code>store.set(&#39;user.profile.name&#39;, &#39;John&#39;)</code></p><h3 id="batch" tabindex="-1">batch <a class="header-anchor" href="#batch" aria-label="Permalink to &quot;batch&quot;">​</a></h3><p><code>batch(updates: [string, any][]): void</code></p><p>Performs multiple updates atomically.</p><h3 id="subscribe" tabindex="-1">subscribe <a class="header-anchor" href="#subscribe" aria-label="Permalink to &quot;subscribe&quot;">​</a></h3><p><code>subscribe(subscriber: () =&gt; void): () =&gt; void</code></p><p>Subscribes to store changes. Returns an unsubscribe function.</p><h3 id="computed" tabindex="-1">computed <a class="header-anchor" href="#computed" aria-label="Permalink to &quot;computed&quot;">​</a></h3><p><code>computed&lt;R&gt;(path: string, fn: (state: T) =&gt; R): ComputedFn&lt;R&gt;</code></p><p>Creates a computed value that updates when dependencies change.</p><h3 id="action" tabindex="-1">action <a class="header-anchor" href="#action" aria-label="Permalink to &quot;action&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>action&lt;Args extends any[], Result&gt;(</span></span>
<span class="line"><span>  fn: Action&lt;Args, Result&gt;</span></span>
<span class="line"><span>): (...args: Args) =&gt; Promise&lt;Result&gt;</span></span></code></pre></div><p>Creates an action function for complex state updates.</p><p>Example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const fetchUser = store.action(</span></span>
<span class="line"><span>  async (store, userId: string) =&gt; {</span></span>
<span class="line"><span>    store.set(&#39;loading&#39;, true)</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>      const user = await api.getUser(userId)</span></span>
<span class="line"><span>      store.set(&#39;user&#39;, user)</span></span>
<span class="line"><span>      return user</span></span>
<span class="line"><span>    } finally {</span></span>
<span class="line"><span>      store.set(&#39;loading&#39;, false)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>)</span></span></code></pre></div><h2 id="react-hooks" tabindex="-1">React Hooks <a class="header-anchor" href="#react-hooks" aria-label="Permalink to &quot;React Hooks&quot;">​</a></h2><h3 id="usestore" tabindex="-1">useStore <a class="header-anchor" href="#usestore" aria-label="Permalink to &quot;useStore&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function useStore&lt;S extends State, R&gt;(</span></span>
<span class="line"><span>  selector: (store: Store&lt;S&gt;) =&gt; R</span></span>
<span class="line"><span>): R</span></span></code></pre></div><p>React hook to subscribe to store updates.</p><p>Example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function UserProfile() {</span></span>
<span class="line"><span>  const userName = useStore(store =&gt; store.get(&#39;user.name&#39;))</span></span>
<span class="line"><span>  const userAge = useStore(store =&gt; store.get(&#39;user.age&#39;))</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  return (</span></span>
<span class="line"><span>    &lt;div&gt;</span></span>
<span class="line"><span>      &lt;h2&gt;{userName}&lt;/h2&gt;</span></span>
<span class="line"><span>      &lt;p&gt;Age: {userAge}&lt;/p&gt;</span></span>
<span class="line"><span>    &lt;/div&gt;</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="store-connections" tabindex="-1">Store Connections <a class="header-anchor" href="#store-connections" aria-label="Permalink to &quot;Store Connections&quot;">​</a></h2><h3 id="connectstores" tabindex="-1">connectStores <a class="header-anchor" href="#connectstores" aria-label="Permalink to &quot;connectStores&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>function connectStores&lt;S extends State, T extends State&gt;(</span></span>
<span class="line"><span>  connections: StoreConnection&lt;S, T&gt;[]</span></span>
<span class="line"><span>): () =&gt; void</span></span></code></pre></div><p>Connects multiple stores together, allowing them to react to each other&#39;s changes.</p><h3 id="storeconnection-interface" tabindex="-1">StoreConnection Interface <a class="header-anchor" href="#storeconnection-interface" aria-label="Permalink to &quot;StoreConnection Interface&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface StoreConnection&lt;S extends State = State, T extends State = State&gt; {</span></span>
<span class="line"><span>  source: Store&lt;S&gt;;</span></span>
<span class="line"><span>  target: Store&lt;T&gt;;</span></span>
<span class="line"><span>  when: (source: Store&lt;S&gt;) =&gt; boolean;</span></span>
<span class="line"><span>  then: (target: Store&lt;T&gt;) =&gt; void;</span></span>
<span class="line"><span>  immediate?: boolean;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h2><h3 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;State&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface State {</span></span>
<span class="line"><span>  [key: string]: any</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="storeoptions" tabindex="-1">StoreOptions <a class="header-anchor" href="#storeoptions" aria-label="Permalink to &quot;StoreOptions&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface StoreOptions {</span></span>
<span class="line"><span>  name?: string;</span></span>
<span class="line"><span>  devTools?: boolean;</span></span>
<span class="line"><span>  persist?: boolean | ((state: any) =&gt; any);</span></span>
<span class="line"><span>  validate?: (state: State) =&gt; boolean | string;</span></span>
<span class="line"><span>  migration?: {</span></span>
<span class="line"><span>    version: number;</span></span>
<span class="line"><span>    migrate: (oldState: any) =&gt; any;</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>  concurrent?: boolean;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="middleware" tabindex="-1">Middleware <a class="header-anchor" href="#middleware" aria-label="Permalink to &quot;Middleware&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>interface Middleware {</span></span>
<span class="line"><span>  onSet?: (path: Path, value: any, prevValue: any) =&gt; any;</span></span>
<span class="line"><span>  onGet?: (path: Path, value: any) =&gt; any;</span></span>
<span class="line"><span>  onBatch?: (updates: BatchUpdate) =&gt; BatchUpdate;</span></span>
<span class="line"><span>  onError?: (error: Error) =&gt; void;</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,56)]))}const g=e(o,[["render",p]]);export{u as __pageData,g as default};
